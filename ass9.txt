
MongoDB CRUD Operations with Examples
1. Create a Collection
To create a collection named employees, use the createCollection method:

js
Copy code
db.createCollection("employees");
Options for createCollection:
capped: Creates a fixed-size collection that overwrites old entries when it reaches its limit.
size: Specifies the size of the collection in bytes.
max: Limits the maximum number of documents in the collection.
2. Insert Operations
Insert a Single Document:
js
Copy code
db.employees.insertOne({
    empid: 1,
    name: "aaa",
    age: 30,
    department: "IT",
    salary: 70000,
    skills: [
        { name: "Java", rating: 4.2 },
        { name: "Python", rating: 3.8 }
    ]
});
Insert Multiple Documents:
js
Copy code
db.employees.insertMany([
    {
        empid: 2,
        name: "bbb",
        age: 28,
        department: "Marketing",
        salary: 65000,
        skills: [
            { name: "SEO", rating: 4.0 },
            { name: "Content Writing", rating: 3.5 }
        ]
    },
    {
        empid: 3,
        name: "ccc",
        age: 35,
        department: "Sales",
        salary: 80000,
        skills: [
            { name: "Negotiation", rating: 4.5 },
            { name: "CRM", rating: 3.9 }
        ]
    },
    {
        empid: 4,
        name: "ddd",
        age: 27,
        department: "HR",
        salary: 60000,
        skills: [
            { name: "Recruitment", rating: 4.3 },
            { name: "Employee Relations", rating: 4.1 }
        ]
    }
]);
3. Read Operations
Find All Employees:
js
Copy code
db.employees.find().pretty();
Find Employees in a Specific Department with Attendance Above Threshold:
js
Copy code
db.employees.find({
    department: { $eq: "Engineering" },
    attendance: { $gt: 80 }
});
Combine Conditions with $and and $or:
js
Copy code
db.employees.find({
    $and: [
        { $or: [{ department: "Engineering" }, { department: "Sales" }] },
        { attendance: { $gt: 80 } }
    ]
});
Find Employees with Specific Skills:
js
Copy code
db.employees.find({
    "skills.name": "Java",
    "skills.rating": { $gt: 4 }
});
4. Update Operations
Update a Single Document:
js
Copy code
db.employees.updateOne(
    { name: "aaa" },
    {
        $set: {
            department: "Sales",
            salary: 62000
        }
    }
);
Upsert (Update or Insert if Not Found):
js
Copy code
db.employees.updateOne(
    { empid: 5 },
    {
        $set: {
            name: "eee",
            age: 30,
            department: "Finance",
            salary: 70000,
            skills: [
                { name: "Excel", rating: 4.5 },
                { name: "Accounting", rating: 4.0 }
            ]
        }
    },
    { upsert: true }
);
5. Delete Operations
Delete a Single Document:
js
Copy code
db.employees.deleteOne({
    empid: { $eq: 5 }
});
Logical and Conditional Operators
$eq: Matches values that are equal to a specified value.
$gt: Matches values that are greater than a specified value.
$lt: Matches values that are less than a specified value.
$in: Matches any of the values specified in an array.
$and: Joins query clauses with a logical AND.
$or: Joins query clauses with a logical OR.
$all: Matches arrays that contain all elements specified in the query.
This guide outlines essential MongoDB CRUD operations along with practical examples for common use cases.






You said:
alsousearrayoprationsanupsert
ChatGPT said:
ChatGPT
To use array operations and the upsert option in MongoDB, hereâ€™s a guide that includes common array operations (such as $push, $pull, $addToSet, $each) and examples with upsert to insert a new document if the specified criteria don't match any existing document.

1. Array Operations
$push
The $push operator is used to add an element to an array field.

js
Copy code
// Add a new skill to the employee's skill array
db.employees.updateOne(
    { empid: 1 },
    { $push: { skills: { name: "C++", rating: 4.0 } } }
);
$push with $each
The $each modifier allows you to add multiple items to an array.

js
Copy code
// Add multiple skills to the employee's skill array
db.employees.updateOne(
    { empid: 1 },
    { 
        $push: { 
            skills: { 
                $each: [
                    { name: "JavaScript", rating: 4.5 },
                    { name: "SQL", rating: 4.1 }
                ]
            } 
        }
    }
);
$addToSet
The $addToSet operator adds an element to an array only if it does not already exist.

js
Copy code
// Add a unique skill to the employee's skill array
db.employees.updateOne(
    { empid: 1 },
    { $addToSet: { skills: { name: "Python", rating: 3.8 } } }
);
$pull
The $pull operator removes elements from an array that match a specified condition.

js
Copy code
// Remove a skill with the name "Java"
db.employees.updateOne(
    { empid: 1 },
    { $pull: { skills: { name: "Java" } } }
);
2. Using upsert with Array Operations
The upsert option will insert a new document if no document matches the specified filter. This can be combined with array operations to conditionally add an array field when inserting.

Example: Upsert with Array and $push
This example attempts to update an employee's document. If no document with empid: 6 exists, it creates a new document with the specified details and adds an array of skills.

js
Copy code
db.employees.updateOne(
    { empid: 6 },
    { 
        $set: { 
            name: "fff", 
            age: 29, 
            department: "Engineering", 
            salary: 75000 
        },
        $push: { 
            skills: { 
                $each: [
                    { name: "Project Management", rating: 4.3 },
                    { name: "Data Analysis", rating: 4.0 }
                ] 
            }
        }
    },
    { upsert: true }
);
Example: Upsert with Array and $addToSet
Using $addToSet ensures that duplicate skills are not added when upserting.

js
Copy code
db.employees.updateOne(
    { empid: 7 },
    { 
        $set: { 
            name: "ggg", 
            age: 32, 
            department: "Finance", 
            salary: 67000 
        },
        $addToSet: { 
            skills: { 
                $each: [
                    { name: "Excel", rating: 4.5 },
                    { name: "Financial Analysis", rating: 4.3 }
                ]
            } 
        }
    },
    { upsert: true }
);