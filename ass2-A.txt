Step-by-Step Instructions for Assignment 2A (Employee Schema)
1. Create Tables with Referential Integrity Constraints
Define the Employee, Dept, and Project tables, ensuring you use ON DELETE CASCADE for foreign key relationships.

sql
Copy code
CREATE TABLE Dept (
    Dept_id INT PRIMARY KEY,
    Dept_name VARCHAR(50),
    Dept_location VARCHAR(50)
);

CREATE TABLE Employee (
    Emp_id INT PRIMARY KEY,
    Dept_id INT,
    Emp_fname VARCHAR(50),
    Emp_lname VARCHAR(50),
    Emp_Position VARCHAR(50),
    Emp_salary DECIMAL(10, 2),
    Emp_JoinDate DATE,
    FOREIGN KEY (Dept_id) REFERENCES Dept(Dept_id) ON DELETE CASCADE
);

CREATE TABLE Project (
    Proj_id INT PRIMARY KEY,
    Dept_id INT,
    Proj_Name VARCHAR(50),
    Proj_Location VARCHAR(50),
    Proj_cost DECIMAL(10, 2),
    Proj_year INT,
    FOREIGN KEY (Dept_id) REFERENCES Dept(Dept_id) ON DELETE CASCADE
);
2. Insert Sample Data
Add sample data to each table to perform the necessary queries.

sql
Copy code
-- Insert records into Dept table
INSERT INTO Dept VALUES (1, 'Computer', 'Pune'), (2, 'IT', 'Mumbai'), ...;

-- Insert records into Employee table
INSERT INTO Employee VALUES (1, 1, 'Peter', 'Parker', 'Manager', 50000, '1982-04-10'), ...;

-- Insert records into Project table
INSERT INTO Project VALUES (101, 1, 'Project A', 'Pune', 150000, 2004), ...;
3. Create a Simple View
Create a view to display employee and department details together.

sql
Copy code
CREATE VIEW EmployeeDeptView AS
SELECT Employee.Emp_id, Emp_fname, Emp_lname, Emp_Position, Emp_salary, Dept.Dept_name
FROM Employee
NATURAL JOIN Dept;
4. Create an Index
Create indexes to improve query performance.

sql
Copy code
CREATE INDEX idx_emp_position ON Employee(Emp_Position);
CREATE INDEX idx_proj_location ON Project(Proj_Location);
5. Create Synonyms
MySQL does not support synonyms natively like Oracle, but aliases can be used for convenience in queries.

6. Execute the Queries
Insert at least 10 records in the Employee table (as shown in step 2).

Display all Employee details with Department ‘Computer’ and ‘IT’ and Employee first name starting with 'P' or 'H'.

sql
Copy code
SELECT * FROM Employee
JOIN Dept ON Employee.Dept_id = Dept.Dept_id
WHERE Dept_name IN ('Computer', 'IT') AND (Emp_fname LIKE 'P%' OR Emp_fname LIKE 'H%');
List the number of different Employee Positions.

sql
Copy code
SELECT COUNT(DISTINCT Emp_Position) AS PositionCount FROM Employee;
Give 10% increase in Salary for Employees who joined before 1985.

sql
Copy code
UPDATE Employee
SET Emp_salary = Emp_salary * 1.10
WHERE YEAR(Emp_JoinDate) < 1985;
Delete Department details with location ‘Mumbai’.

sql
Copy code
DELETE FROM Dept WHERE Dept_location = 'Mumbai';
Find the names of Projects with location ‘Pune’.

sql
Copy code
SELECT Proj_Name FROM Project WHERE Proj_Location = 'Pune';
Find the project with cost between 100000 and 500000.

sql
Copy code
SELECT * FROM Project WHERE Proj_cost BETWEEN 100000 AND 500000;
Find the project with the maximum cost and the average project cost.

sql
Copy code
SELECT Proj_Name, Proj_cost FROM Project ORDER BY Proj_cost DESC LIMIT 1;
SELECT AVG(Proj_cost) AS AverageCost FROM Project;
Display all employees with Emp_id and Emp_name in decreasing order of Emp_lname.

sql
Copy code
SELECT Emp_id, Emp_fname, Emp_lname FROM Employee ORDER BY Emp_lname DESC;
Display Proj_name, Proj_location, Proj_cost of all projects started in 2004, 2005, and 2007.

sql
Copy code
SELECT Proj_Name, Proj_Location, Proj_cost FROM Project WHERE Proj_year IN (2004, 2005, 2007);
7. Manipulate the View
Perform insert, update, delete operations, and then drop the view:

Insert:

sql
Copy code
INSERT INTO EmployeeDeptView (Emp_id, Emp_fname, Emp_lname, Emp_Position, Emp_salary, Dept_name)
VALUES (11, 'Jane', 'Doe', 'Analyst', 60000, 'Computer');
This might not work directly if the view includes columns from multiple tables. In that case, insert into the base tables.

Update:

sql
Copy code
UPDATE EmployeeDeptView SET Emp_salary = 55000 WHERE Emp_id = 1;
Delete:

sql
Copy code
DELETE FROM EmployeeDeptView WHERE Emp_id = 1;
Drop the View:

sql
Copy code
DROP VIEW IF EXISTS EmployeeDeptView;